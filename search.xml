<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Django学习笔记(1)]]></title>
    <url>%2F2019%2F08%2F11%2Fdjango01%2F</url>
    <content type="text"><![CDATA[环境: Python3.6 Ubuntu django2.2 pycharm 社区版 如何新建一个web框架工程1django-admin startproject mysite #其中mysite是自己定义的工程文件名称,这个是由自己定义的 工程目录结构mysite/ ————–&gt; 外层目录,名字可以更改,可以进行打包 ​ mysite/ —————&gt; 工程目录,保存代码和文件 ​ _init__.py —————&gt; 一个将mysite定义为包的空文件 ​ setting.py ————–&gt; 部署配置工程的文件(配置文件) ​ urls.py ————–&gt; URL路由的声明文件(路由文件) ​ wsgi.py ————–&gt; 基于WSGI的Web服务器的配置文件 ​ manage.py ————–&gt; 一个与django工程进行交互的命令工具 我们需要注意的是 settings.py 和 urls.py 用来配置工程和声明路由 三个步骤新建一个工程(上面的操作)1django-admin startproject mysite 修改工程,增加功能(重要且麻烦)创建一个具体应用12python manage.py startapp polls# polls为自己设置的应用名称 （在一个工程中，可以包含多个应用） 工程对应于一个网站，是配置和应用的集合 应用对应于特定功能，是具体功能的载体 修改应用的views.pyviews.py 中包含对某个http请求的响应,根据url的具体响应功能进行修改操作 修改url路由在urls.py中指定url与处理函数之间的路径关系,指定url与响应之间的关系 增加对本地路由的引用在全局路由文件(工程目录下的urls.py)增加对本应用路由文件的引用 1234567from django.urls import include#在urlpatterns中 添加urlpatterns = [ path('index2/', include('hello2app.urls')),] 上面代码中path函数的第一个参数是url,第二个参数是这个路由对应的处理函数. include()函数,用于引入其他路由文件 设置模板路径设置模板路径,让Django框架找到模板所在目录 在工程文件下,找到settings.py 找到TEMPLATES列表形式,这个是设置模板相关参数的位置.其中有个叫’DIRS’的表示路径,需要将本地保存模板的路径告诉工程,这里记得用单引号来表示路径,不然会报错. 123'DIRS': [os.path.join(BASE_DIR, 'hello2app/tempaltes')],# 指定templates所在路径#hello2app/templates 记得用单引号, os.path.join(BASE_DIR, )是将后面的两个路径合并 BASE_DIR指的是当前工程的主路径,hello2app/templates指的是在主路径下hello2app下的templates路径 调试运行web框架(在自己设置的工程目录下,上面的就是在mysite/下,与manage.py同一个级别下的目录) 1python manage.py runserver Django的MTV开发模式云端web系统的三个通用功能需求: 首先，需要进行数据组织,对数据进行存储查询等． 其次，对于web系统还需要通过浏览器进行web展示. 最后,需要对用户发起的请求进行数据的读取并反馈给浏览器正确的请求,所以需要控制逻辑. “此处添加图片” M: Models 模型与数据组织相关的功能 组织和存储数据的方法和模式,与数据模型相关的操作 T: Template 模板与表现相关的所有功能(页面显示) 页面展示风格和方式,与具体数据分离,用于定义表现风格 V: Views 视图针对请求选取数据的功能 选择哪些数据用于展示,指定显示模板,每个url对应一个回调函数 总结: M: Modes 模板 对应 数据 T: Templates 模板 对应 样式 V: Views 视图 对应 处理 用户提交http请求通过WSGI(web服务器接口)转化为url并且给到web框架的路由模块,路由模块将URL与特定功能相关联,而功能放在views的处理部分,views会选取特定的templates,也就是模板(css html js等)以及特定的数据models,这些数据可能来自于文件或者数据库,最终响应用户的请求. T在哪? Templates不会自动生成,因为它是页面展示的风格,需要用户自己去创建目录并且放入相关的模板文件]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python中的字符串]]></title>
    <url>%2F2019%2F05%2F17%2Fstring%2F</url>
    <content type="text"><![CDATA[字符串的基本操作 对于序列的标准操作（索引，切片，乘法，成员资格检查，长度，最小值，最大值）都适用于字符串，但是字符串是不可变的，因此所有的元素赋值和切片赋值都是非法的。]]></content>
      <categories>
        <category>python学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[元组——不可修改的序列]]></title>
    <url>%2F2019%2F05%2F16%2Ftuple%2F</url>
    <content type="text"></content>
      <categories>
        <category>python学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows操作系统任意位置cmd操作]]></title>
    <url>%2F2019%2F05%2F15%2Fcmd%2F</url>
    <content type="text"><![CDATA[平时，我们只能通过按住 windows+r 然后再输入cmd便可以出现这么黑乎乎的一个方框。 然后，可以通过下面这个注册表来实现在任意位置右击出现命令行操作 以下是注册表，可以先新建一个记事本，将内容粘贴进去后把后缀改成reg格式，最后双击下即可。 123456789101112131415161718192021222324252627282930Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here]@=&quot;在此处打开命令行&quot;&quot;Icon&quot;=&quot;cmd.exe&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here\command] @=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt] @=&quot;在此处打开命令行&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt\command] @=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;cd %1\&quot;&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here] @=&quot;在此处打开命令行&quot;&quot;Icon&quot;=&quot;cmd.exe&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here\command] @=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02.python中的主力--列表]]></title>
    <url>%2F2019%2F05%2F11%2Fpython02%2F</url>
    <content type="text"><![CDATA[列表 列表类似于c语言中的数组，但是列表是可变的，可以修改其内容，而且列表中的成员类型可以是不同的。 函数list 可以通过list()函数创建一个列表，任何的序列都可以作为list的参数。 要将字符列表转换为字符串，可以用下面的表达式： 1''.join(list) #list是要转换的列表 列表的基本操作 1.修改列表：给元素赋值 使用索引给特定位置的元素赋值。 注意：修改列表只能在原来列表长度范围内赋值。不可以超出其原来的长度。 2.删除元素 只需要用del语句即可。 3.给切片赋值 切片是极其强大的功能，而能给切片赋值让这个功能更加强大。而切片赋值可以将原来列表变成与原来长度不同的序列。 使用切片赋值还可以在不替换原有元素的情况插入新元素。 1234numbers[1:1]= [2,3,4] #这个语句是说我在numbers[1:1] 长度区间是在numbers[1]的位置插入[2,3,4]numbers[1:3] = [7,8] #将numbers[1]赋值为7，将numbers[2]赋值为8del numbers[1:4] #这个语句等价于下面这个语句numbers[1:3] = [] 列表方法 方法是与对象（列表、数、字符串等）联系紧密的函数。通常，像下面这样的调用方法： 1object.method(arguments) 1.append append方法用于在列表末尾添加一个对象。 2.clear clear方法可以清空列表的内容 3.copy copy方法可以复制列表。常规复制只是将另一个名称关联到列表。 4.count count方法可以计算指定的元素在列表中出现多少次。 5.extend extend方法可以同时将多个值附加到列表末尾，所以可以用此方法将一个列表扩展到另外一个列表。（注意到，extend方法不会返回任何值） 这个类似拼接，但是与拼接有一个差别，extend方法会改变原序列，而常规的拼接中，情况是返回一个全新的列表。 如果想用拼接达到extend的效果，可用这个命令，不过拼接的效率比extend低。 1a += b #等价于 a = a+b 6.index index方法在列表中查找指定值第一次出现的索引。 7.insert insert方法用于将一个对象插入列表。 1lst.insert(5,'插入的对象') #第一个参数代表在列表索引为5下插入某个对象 8.pop pop方法从列表中删除一个元素（末尾为后一个元素），并返回这一元素。 使用pop()方法可以实现数据结构–栈的操作，栈是后进先出（LIFO）。 pop()方法是唯一修改列表又返回一个非None值的列表方法。 9.remove remove方法用于删除第一个为指定值的元素。 10.reverse reverse方法按相反的顺序排列列表中的元素。 11.sort sort方法用于对列表就地排序，就地排序意味着对原来的列表进行修改，使其元素按顺序 排列，而不是返回排序后的列表的副本。 此外，可以使用sorted()方法，这个函数适用于任何序列，但总是返回一个列表。 12.高级排序 sort()方法接受两个可以选择的参数，key和reverse。 key：可以将其设置为一个用于排序的函数，用它为每一个元素创建一个键，再根据这些键对元素进行排序。 reverse： 设置为True或者Flase,是否对序列逆序排序。 如果你想更深入地了解排序，可以参阅文章“Sorting Mini-HOW TO”。]]></content>
      <categories>
        <category>python学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01.python中的数据结构]]></title>
    <url>%2F2019%2F05%2F10%2Fpython01%2F</url>
    <content type="text"><![CDATA[在python中，最基本的数据结构是序列（sequence）,序列中每个元素都有编号，第一个元素从0开始，当然序列也可以从后向前索引，最后一个的索引为-1，以此类推。 序列 列表：可以修改，进行增删改查。 元组：不可以修改（增删改），只能进行查，由于在字典中键不能修改，所以可以用元组。 字符串 通用的序列操作 索引： 序列中的元素都有编号，从左到右从0开始编号，也支持从右向左索引，最右边的索引值是-1. 上面这种索引适合于所有的序列。 而对于字符串的索引无需将其先赋给一个变量。 切片 索引可以访问序列中的单个元素，也可以使用切片来访问特定范围内的元素。用两个索引并用冒号分割。（左闭右开，即从左边索引的开始一直到右边索引的前一个元素） 可以自己数数哈 :-) 上面访问的是一个连续的区间，python这么强大当然支持跳步啦~，因此可以继续加一个冒号分割，最后面添加步长是多少。例如，分别显示步长为2，4，6. 关于冒号，第一个冒号是说我从第一个元素开始，第二个冒号是说我可以一直到最后一个元素都包括。 序列相加 可以使用加法运算符来拼接序列。（这里只支持相同数据类型的序列相加减） 一般来说，不能拼接不同类型的序列。 乘法 将序列乘某个数x,相当于复读这个序列x次来创建一个新序列。 [None]代表这个列表里边什么都没有，即一个空的列表。 成员资格 要检查某个特定的值是否包含在序列中，可以使用运算符in，若满足条件，返回True，不满足时返回False。这个运算符称之为布尔运算符。 python中内置了函数，len()表示序列中包含的元素个数,min()返回的是序列中的最小值,max()返回序列中的最大值。]]></content>
      <categories>
        <category>python学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款优秀的思维导图软件]]></title>
    <url>%2F2019%2F05%2F08%2Fmubu%2F</url>
    <content type="text"><![CDATA[感谢武伟小哥哥送我的幕布高级会员，可以有一年的高级会员可以用，这里怕自己哪天换了电脑或者电脑出现什么故障忘记账号和密码，所以这里给出来，如果有人也有同样需求的话，其实可以和我共享这个账号，保证不会乱动你的东西:) 希望自己以后在里面更新多多的有用的知识或者其他东西:) 现在只有这个，是未看完一本书总结的。 目前就这样–2019.5.8 写完了中期答辩后]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（一）由浅入深——从线性方程组开始]]></title>
    <url>%2F2019%2F04%2F29%2F1%2F</url>
    <content type="text"><![CDATA[两种理解我们都会解这种方程组吧，三个式子通过加减消元（高斯消元）来解这类方程组，而解的内容只与未知变量前面的系数有关，其实我们并不关心未知变量到底是不是x,y,z，只需要知道对应的位置就行。（若第三个方程x前面的系数≠0的话，解肯定会改变的。） 所以，我们可以把系数提取出来按照原来的位置放在一起，便构成了矩阵，若等号右边存在非0元素的话，把整体（等号左边和右边）放在一起便构成了增广矩阵。关于矩阵，以后会详细讲并且可能会花大量的时间。 仔细观察上面这个式子，从列来看，x,y,z前面的系数分别是(1,3,0)，(2,8,4)，(1,1,1)。把x y z提取出来上面的式子变成这样， 所以，上面的方程组也可以理解为用等号左边的三个向量的线性组合来表示右边的向量。线性组合的系数便是x,y,z的值。 将系数提取出来构成矩阵，将未知变量写成列向量，如下图所示。]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我所理解的线性代数--绪论]]></title>
    <url>%2F2019%2F04%2F23%2F5%2F</url>
    <content type="text"><![CDATA[声名首先，这个系列的视频和文稿都是免费的，我写下线性代数系列文章（后面可能会在哔哩哔哩上传些免费视频），只是因为大四即将毕业，这四年算是碌碌无为了，有点不甘心，想做点什么东西来证明自己这四年没有白过，刚好在经历过考研的折磨之后又思考大学课程关于线性代数的讲解，对我来说，它们过于死板，而考研数学无论数学几，所考查的又都是关于技巧和套路，根本体会不到数学之美。当然，我想批判中国的应试教育，但是我又没有资格，毕竟我是一个考研loser，分数不高不说，也没考上特别好的学校，所以基本上没什么话语权嘛，也害怕被那些高分大佬嘲讽。总之，得留点什么给自己，那就讲讲我所理解的线性代数吧，即使多年后我根本都忘记了大学学过的线性代数，也希望从我这个系列的视频（文稿中）找到线性代数的强大和美妙。 知其然，知其所以然在我大一学习线性代数时期，常常伴随着抽象的概念和证明，学起来十分的晦涩，由于老师讲课过程中都是伴随着抽象，所以，对于理论我可能略知一二，但是为什么会发明矩阵这个东西以及它有什么用我却完全不知道，当然，我不能说大学教育的失败，毕竟有些人从大学里出来后很厉害的，所以我只能说自己很失败，虽然学过线性代数而且期末考试取得了90多分的高分，这是我大学为数不多的考上90+的一个科目，但我对它还是知道太少，所以我想录些视频试图讲明白这些东西，可能有点难，至少对于我哈佛（哈尔滨佛学院）的学生，而且本科也不是数学系的，试图讲清楚线性代数这门课简直是不自量力，所以可能会出错，也别怪我讲的不好，毕竟是免费的。好了，言归正传，大学学的线性代数都太过于抽象，但是数学家们发明矩阵仅仅是为了抽象嘛？肯定不是，他肯定是想用于说明些什么现象或者事物，当时我学线性代数的时候有很多困惑，比如，秩到底是什么，它想研究什么东西？矩阵是什么？它仅仅是由几行几列的数字组合吗？又或者，矩阵的乘法为什么不满足交换律，矩阵乘法有什么实际应用呢？行列式又是什么东西，它的几何意义又是什么？为什么只有方阵才能拥有行列式而m x n的矩阵却没有？什么是矩阵的相似？两个矩阵相似代表着什么，他们之间有什么联系？特征值特征向量又是什么，为什么会引出这种东西？等等问题，都值得好好想一想，不是说用书本上的定义去解释，而是感性的描述出来它们是什么，以及它们到底有什么用？我想通过下面一系列视频试图解释明白，当然，考虑到我的许多好朋友还要考研，我也就打算再看看考研数学结合到一起来讲，当然，肯定会疏漏，考研的话还是建议多做题。 写到最后出这个系列的灵感来自我很多好朋友，考研过程中认识了好多可爱的人儿，感谢考研过程认识到善良的人，虽然这些人都未曾谋面，有的也不知道真名。比如武伟老哥，一个技术大佬，ACM很厉害，而且乐于分享，心地善良，这里是他的博客。我出这个系列部分灵感来自于他。 以下，对我考研过程中有帮助的人，我想记录一下： 和我租房子的小伙伴–泽宇，老朱 喻子凡 五猫 疯狂走位的小鱼人 唐珍（一位漂亮的小姐姐，第一次还害怕我吼她，哈哈哈哈~) 301宿舍全体人员(感谢考研时候曾住在你们宿舍，每天早上很早被我吵醒，哈哈~)]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习笔记-Python数据分析（一）]]></title>
    <url>%2F2019%2F04%2F18%2F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[关于Numpy Numpy提供的是数组，而不是python本身的列表，这是因为在数据分析中，一组数组是相同的类型，所以采用c编写的可以加快运行速度。]]></content>
      <categories>
        <category>python学习笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学思潮]]></title>
    <url>%2F2019%2F04%2F06%2F%E6%95%B0%E5%AD%A6%E6%80%9D%E6%BD%AE%2F</url>
    <content type="text"><![CDATA[这是我写的第一篇文章，来记录我最喜欢的数学，有关它对这个世界发展所做出的贡献，由于自己又想从事关于计算机方面的工作，可能以后关于算法以及数学在计算机中的应用多一些。 虽然许多数学先驱人物已经消失在历史的长河中，除了特别出名的数学家可能被后人记住，但是我这里还是感谢那些为数学发展而作出贡献的先驱，数学的每一次前进，都伴随着人类文明的一次进步。从原始人开始，他们对数开始有概念，他们可以分辨多和少，慢慢的，人们就有了明确的数的概念，慢慢地，逐渐衍生出三种有代表性的计数方法，石子计数，结绳计数，刻痕计数，这样可以记录较大的数字，也便于累计和保存。 之前读过一本书，书中作者说： 在我看来，数学与科学、人文的各个分支一样，都是人类大脑进化和智力发展进程的反映。它们在特定的历史时期必然相互影响，并呈现出某种相通的特性。在按时间顺序讲述不同地域文明的同时，我们先后探讨了数学与各式各样文明之间的关系。例如，埃及和巴比伦的数学来源于人们生存的需要，希腊数学与哲学密切相关，中国数学的活力来自历法改革，印度数学的源泉始于宗教，而波斯或阿拉伯的数学与天文学互不分离。 文艺复兴是人类文明进程的一个里程碑，这个时期的艺术推动了几何学的发展。到了17世纪，微积分的产生解决了科学和工业革命的一系列问题，而18世纪法国大革命时期的数学涉及力学、军事和工程技术。19世纪前半叶，数学和诗歌几乎同时从古典进入现代，其标志分别是非交换代数和非欧几何学的诞生，爱伦·坡（E.Allan Poe，1809—1849）和波德莱尔（C.Baudelaire，1821—1867）的出现。进入20世纪以后，抽象化又成为数学和人文学科的共性。 数学中的抽象以集合论和公理化为标志，与此同时，艺术领域则出现了抽象主义和行动绘画。哲学与数学的再次交汇产生了现代逻辑学，并诞生了维特根斯坦和哥德尔定理。更有意思的是，数学的抽象化不仅没有使其被束之高阁，反而得到意想不到的广泛应用，尤其在理论物理学、生物学、经济学、电子计算机和混沌理论等方面。由此可见，这是符合历史潮流和文明进程规律的。尽管如此，数学天空的未来并非一片晴朗。 数学经过了好几千的发展，想讲清楚这几千的细节是有点难度的，这个坑我也不知道我能填多久，也许一辈子都填不完，然而，这正是我感兴趣的数学，我想弄清楚数学如何发展的，以及它如何深远的影响我们的生活。我曾经天真的以为，在学校期间，会有老师讲这些知识或者科普一下，然而，我马上大学都要毕业了，我在学校学的数学知识都是为了应付考试，以及无聊的计算和某些计算技巧。我总觉得这么学数学不太好玩。 最后，先附上一张数学年表吧。 约公元前3000年，埃及出现象形数字。公元前2400—前1600年，巴比伦泥板书使用六十进制计数法，已知毕达哥拉斯定理（勾股定理）。公元前1850—前1650年，埃及纸草书使用十进制计数法。公元前1400—前1100年，中国殷墟甲骨文使用十进制计数法；公元前11世纪，周公和商高已知“勾三、股四、弦五”。约公元前600年，希腊泰勒斯开始命题论证；中国荣方和陈子已知勾股定理。约公元前540年，希腊毕达哥拉斯学派证明毕氏定理，由发现不可通约量。约公元前500年，印度《绳法经》给出的精确值，已知毕达哥拉斯定理。约公元前460年，希腊智人学派（也称巧辩学派）提出三大几何作图难题。约公元前450年，希腊埃利亚学派的芝诺提出“芝诺悖论”。约公元前380年，希腊柏拉图在雅典创办“柏拉图学园”，主张通过学习几何培养逻辑思维能力。约公元前335年，希腊欧德莫斯著《几何学史》，成为第一个数学史家。约公元前300年，希腊欧几里得著《几何原本》，用公理法建立演绎数学体系。公元前287—前212年，希腊阿基米德给出球体积计算公式、圆周率上下界，隐含近代积分学思想。公元前230年，希腊埃拉托色尼发明“筛法”，用于建立素数表。公元前225年，希腊阿波罗尼奥斯著《圆锥曲线论》。约公元前150年，中国出现最早的数学书《算数书》，之后又有《周髀算经》《九章算术》。约150年，希腊托勒密著《天文学大成》，发展了三角学。约250年，希腊丢番图著《算术》，提出不定方程，引入未知数，创建未知数的符号。约370年，希腊希帕蒂娅出生，成为史上第一位女数学家。462年，中国祖冲之计算圆周率，精确到小数点后7位，以355/113为密率。820年，阿拉伯花拉子密著《代数学》，此书12世纪传入欧洲，代数学因此得名。850年，印度马哈维拉著《计算精华》，率先给出二项式定理的计算公式。约870年，印度出现包括零的十进制数字，后传至阿拉伯变成印度—阿拉伯数字。1100年，阿拉伯欧玛尔·海亚姆用圆与抛物线的交点求三次方程的根。1150年，印度婆什迦罗对负数有所认识，并接纳了无理数。1202年，意大利斐波那契著《算经》，提出“兔子问题”。1247年，中国秦九韶著《数书九章》，发现大衍术和秦九韶算法。1482年，欧几里得《几何原本》（拉丁文译本）首次出版。1545年，意大利卡尔达诺著《大术》，给出三次和四次方程求解法。1572年，意大利邦贝利著《代数学》，提出初步的虚数理论。1591年，法国韦达讨论方程根与系数的关系，成为现代代数符号之父。1614年，英国纳皮尔建立对数理论。1629年，荷兰吉拉尔提出代数基本定理。1637年，法国笛卡尔创立解析几何学；费尔马提出“费尔马大定理”。1642年，法国帕斯卡尔发明世界第一台加减法机械计算机。1657年，荷兰惠更斯提出数学期望概念，此前帕斯卡尔和费尔马在通信中已谈及概率问题。1665年，英国牛顿研究流数术，他和德国莱布尼茨先后创立微积分，后者发表在先。1666年，德国莱布尼茨著《论组合的艺术》，提出数理逻辑的思想。1680年，日本关孝和始创“和算”，引入行列式概念。1736年，瑞士欧拉解决哥尼斯堡七桥问题，创立图论和几何拓扑学。1777年，法国布丰提出“投针问题”，推动概率论的发展。1799年，法国蒙日创立画法几何学。1801年，德国高斯著《算术研究》，奠定了近代数论的基础。1802年，法国蒙蒂克拉和拉朗德合著四卷本《数学史》出版，成为最早系统论述数学史的著作。1810年，法国热尔岗编辑出版《纯粹与应用数学年刊》，是最早的专门数学期刊。1812年，英国剑桥分析学会成立，是最早的数学分支学会。1824年，挪威阿贝尔证明五次或五次以上的一般代数方程不存在根式解。1829年，俄国罗巴切夫斯基发表最早的非欧几何论著——《论几何基础》。1832年，法国伽罗华彻底解决代数方程根式可解性问题，确立群论的基本概念。1843年，英国哈密尔顿发现四元数，首次提出非交换代数的概念。1851年，德国黎曼提出“黎曼猜想”。1864年，莫斯科数学会成立，是历史上的第一个数学会。1868年，意大利贝尔特拉米首先提出伪球面可作为实现双曲几何的模型。1871年，德国G.康托尔首次引进无穷集合的概念，随后创立集合论。1872年，德国F.克莱因发表《埃尔朗根纲领》，试图以群论为基础统一几何学。1889年，意大利皮亚诺建立了自然数的皮亚诺公理系统。1897年，第一届国际数学家大会在瑞士苏黎世举行。1898年，英国皮尔逊创立数理统计学。1899年，德国希尔伯特著《几何基础》，开创公理化方法。1900年，希尔伯特在巴黎国际数学家大会上提出了23个著名的数学问题。1903年，英国罗素提出“理发师悖论”，引发第三次数学危机。1904年，法国庞加莱提出“庞加莱猜想”。1907年，德国闵可夫斯基提出四维时空结构，为狭义相对论提供了最适用数学模型。1910年，希尔伯特建立了希尔伯特空间，把几何学的维数从有限推进到无限。1931年，奥地利哥德尔提出了公理化数学体系的不完备性定理。1933年，苏联柯尔莫哥洛夫建立概率论的公理系统。1936年，奥斯陆国际数学家大会第一次颁发菲尔兹奖。1938年，布尔巴基丛书《数学原理》出版。1944年，美籍匈牙利人冯·诺依曼等建立博弈论。1948年，美国维纳著《控制论》。1949年，英国剑桥大学设计制造出第一台存储程序的电子计算机EDSAC。1976年，美国阿佩尔和哈肯利用计算机证明了地图四色定理。1977年，曼德勃罗建立分形几何学，维度从整数推进到分数。1978年，沃尔夫数学奖开始颁发。1995年，英国怀尔斯证明费尔马大定理。2003年，阿贝尔奖开始颁发。2006年，数学界最终确认俄罗斯的佩雷尔曼证明了庞加莱猜想。]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
